
---
# x-airflow-common:
#   &airflow-common
#   # In order to add custom dependencies or upgrade provider packages you can use your extended image.
#   # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
#   # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
#   build:
#     context: airflow
#     dockerfile: Dockerfile
#     args:
#       AIRFLOW_IMAGE_NAME: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.3}
#   environment:
#     &airflow-common-env
#     AIRFLOW__CORE__EXECUTOR: LocalExecutor
#     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
#     AIRFLOW__CORE__FERNET_KEY: ''
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
#   volumes:
#     - ./airflow/dags:/opt/airflow/dags
#     - ./airflow/logs:/opt/airflow/logs
#     - ./airflow/plugins:/opt/airflow/plugins
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on:
#     &airflow-common-depends-on
#     postgres:
#       condition: service_healthy

services:
  clickhouse-server:
    platform: linux/amd64
    container_name: clickhouse-server
    image: yandex/clickhouse-server
    volumes:
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/zookeeper-servers.xml:/etc/clickhouse-server/conf.d/zookeeper-servers.xml
      - ./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/clickhouse-data:/var/lib/clickhouse
    ports:
      - '8123:8123'
    networks:
      - kafka-net
    restart: always

  clickhouse-client:
    platform: linux/amd64
    container_name: clickhouse-client
    image: yandex/clickhouse-client
    entrypoint:
      - /bin/sleep
    command:
      - infinity
    networks:
      - kafka-net
    restart: always

  zookeeper:
    container_name: zookeeper
    platform: linux/amd64
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"] # Checking if port 2181 is accessible
      interval: 30s   # Run the check every 30 seconds
      timeout: 10s    # Fail if the check takes more than 10 seconds
      retries: 5      # Mark as unhealthy after 5 failures
      start_period: 20s # Time to wait before the health check starts
    restart: always

  kafka1:
    container_name: kafka1
    image: wurstmeister/kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_MS: 300000 # 5m
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 60000 # 1m
      KAFKA_LOG_RETENTION_BYTES: -1  # Không giới hạn kích thước retention
      KAFKA_LOG_RETENTION_POLICY: delete  # Đảm bảo chính sách xóa
    volumes:
      - ./data/kafka1_data:/kafka
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"] # Checking if Kafka's port 9092 is open
      interval: 30s   # Run the check every 30 seconds
      timeout: 10s    # Fail if the check takes more than 10 seconds
      retries: 5      # Mark as unhealthy after 5 failures
      start_period: 30s # Time to wait before starting health checks
    restart: always

  kafka2:
    container_name: kafka2
    image: wurstmeister/kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_MS: 300000 # 5m
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 60000 # 1m
    volumes:
      - ./data/kafka2_data:/kafka
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9093"] # Checking if Kafka's port 9092 is open
      interval: 30s   # Run the check every 30 seconds
      timeout: 10s    # Fail if the check takes more than 10 seconds
      retries: 5      # Mark as unhealthy after 5 failures
      start_period: 30s # Time to wait before starting health checks
    restart: always

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
      - kafka2
    ports:
      - "8083:8083"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      SERVER_PORT: 8083
    networks:
      - kafka-net

  kafka-producer:
    container_name: kafka-producer
    build: producer
    depends_on:
      kafka1:
        condition: service_healthy
    volumes:
      - ./producer:/app
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - kafka-net

  flink-jobmanager:
    container_name: flink-jobmanager
    build: flink-1.18.1
    ports:
      - "8081:8081"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    command: jobmanager
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    networks:
      - kafka-net
    volumes:
      - ./flink-1.18.1/jobs:/opt/flink/jobs

  flink-taskmanager-1:
    container_name: flink-taskmanager-1
    build: flink-1.18.1
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - kafka-net
    volumes:
      - ./flink-1.18.1/jobs:/opt/flink/jobs

  flink-taskmanager-2:
    container_name: flink-taskmanager-2
    build: flink-1.18.1
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - kafka-net
    volumes:
      - ./flink-1.18.1/jobs:/opt/flink/jobs

  # postgres:
  #   image: postgres:13
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes:
  #     - postgres-db-volume:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "airflow"]
  #     interval: 5s
  #     retries: 5
  #   restart: always

  # airflow-webserver:
  #   <<: *airflow-common
  #   container_name: airflow-webserver
  #   command: webserver
  #   ports:
  #     - 8080:8080
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-scheduler:
  #   <<: *airflow-common
  #   container_name: airflow-scheduler
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-init:
  #   <<: *airflow-common
  #   container_name: airflow-init
  #   entrypoint: /bin/bash
  #   # yamllint disable rule:line-length
  #   command:
  #     - -c
  #     - |
  #       function ver() {
  #         printf "%04d%04d%04d%04d" $${1//./ }
  #       }
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
  #         echo
  #       fi
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   # yamllint enable rule:line-length
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #   user: "0:0"
  #   volumes:
  #     - ./airflow:/sources

  # airflow-cli:
  #   <<: *airflow-common
  #   container_name: airflow-cli
  #   profiles:
  #     - debug
  #   environment:
  #     <<: *airflow-common-env
  #     CONNECTION_CHECK_MAX_COUNT: "0"
  #   command:
  #     - bash
  #     - -c
  #     - airflow

# volumes:
#   postgres-db-volume:
#     name: airflow_postgres_db_volume

networks:
  kafka-net:
    driver: bridge

